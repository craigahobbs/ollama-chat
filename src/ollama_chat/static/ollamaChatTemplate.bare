# Licensed under the MIT License
# https://github.com/craigahobbs/ollama-chat/blob/main/LICENSE

include <args.bare>
include <forms.bare>

include 'ollamaChatUtil.bare'


# The Ollama Chat template variables page
async function ollamaChatTemplateVariablesPage(args):
    templateID = objectGet(args, 'id')

    # Get the template
    templateResponse = systemFetch('getTemplate?id=' + templateID)
    templateResponse = if(templateResponse != null, jsonParse(templateResponse))
    if templateResponse == null:
        ollamaChatErrorPage('Unknown template ID')
        return
    endif

    # Render the page title
    title = 'Variables - ' + objectGet(templateResponse, 'title')
    documentSetTitle(title)
    markdownPrint(argsLink(ollamaChatArguments, 'Back', null, true), '', '# ' + markdownEscape(title))

    # Render the variable inputs
    variables = objectGet(templateResponse, 'variables')
    submitFn = systemPartial(ollamaChatTemplateVariablesOnSubmit, templateID, variables)
    ixVariableLast = arrayLength(variables) - 1
    for variable, ixVariable in variables:
        name = objectGet(variable, 'name')
        nameID = 'variable-' + name
        label = objectGet(variable, 'label')
        elementModelRender([ \
            {'html': 'p', 'elem': {'html': 'b', 'elem': {'text': label}}}, \
            {'html': 'p', 'elem': formsTextElements(nameID, '', 50, if(ixVariable == ixVariableLast, submitFn))} \
        ])
        if ixVariable == 0:
            documentSetFocus(nameID)
        endif
    endfor

    # Render the submit button
    elementModelRender([ \
        {'html': 'p', 'elem': formsLinkButtonElements('Start Conversation', submitFn)} \
    ])
endfunction


async function ollamaChatTemplateVariablesOnSubmit(templateID, variables):
    # Get the variable values
    variableValues = {}
    for variable in variables:
        name = objectGet(variable, 'name')
        nameID = 'variable-' + name
        objectSet(variableValues, name, stringTrim(documentInputValue(nameID)))
    endfor

    # Start the conversation
    startRequest = {'id': templateID, 'variables': variableValues}
    startResponse = systemFetch({'url': 'startTemplate', 'body': jsonStringify(startRequest)})
    startResponse = if(startResponse != null, jsonParse(startResponse))
    if startResponse == null:
        return
    endif
    id = objectGet(startResponse, 'id')

    # Navigate to the conversation page
    windowSetLocation(argsURL(ollamaChatArguments, {'view': 'chat', 'id': id}))
endfunction


# The Ollama Chat template page
async function ollamaChatTemplatePage(args):
    templateID = objectGet(args, 'id')
    action = objectGet(args, 'action')
    actionID = objectGet(args, 'actionID')
    spacer = stringFromCharCode(160, 160)

    # Get the template
    templateResponse = systemFetch('getTemplate?id=' + templateID)
    template = if(templateResponse != null, jsonParse(templateResponse))
    if template == null:
        ollamaChatErrorPage('Unknown template ID')
        return
    endif

    # Render the page title
    title = objectGet(template, 'title')
    documentSetTitle(title)
    markdownPrint( \
        argsLink(ollamaChatArguments, 'Back', null, true), \
        '', \
        '# ' + markdownEscape(title) \
    )
    if action == 'title':
        titleClickFn = systemPartial(ollamaChatTemplateOnTitle, template)
        elementModelRender([ \
            {'html': 'p', 'elem': formsTextElements(ollamaChatTemplateInputID, title, 50, titleClickFn)}, \
            {'html': 'p', 'elem': [ \
                formsLinkElements('Cancel', argsURL(ollamaChatArguments)), \
                {'text': spacer + '|' + spacer}, \
                formsLinkButtonElements('Update', titleClickFn) \
            ]} \
        ])
        documentSetFocus(ollamaChatTemplateInputID)
    else:
        markdownPrint('', argsLink(ollamaChatArguments, 'Edit', {'action': 'title'}))
    endif

    # Render the template name
    markdownPrint('', '## Template Name')
    name = objectGet(template, 'name')
    if action == 'name':
        nameClickFn = systemPartial(ollamaChatTemplateOnName, template)
        nameRemoveFn = systemPartial(ollamaChatTemplateOnNameRemove, template)
        elementModelRender([ \
            {'html': 'p', 'elem': formsTextElements(ollamaChatTemplateInputID, name, 50, nameClickFn)}, \
            {'html': 'p', 'elem': [ \
                formsLinkElements('Cancel', argsURL(ollamaChatArguments)), \
                {'text': spacer + '|' + spacer}, \
                formsLinkButtonElements('Update', nameClickFn), \
                {'text': spacer}, \
                formsLinkButtonElements('Remove', nameRemoveFn) \
            ]} \
        ])
        documentSetFocus(ollamaChatTemplateInputID)
    else:
        markdownPrint( \
            '', \
            if(name != null, '**Name:** ' + markdownEscape(name), 'The template is unnamed'), \
            '', \
            argsLink(ollamaChatArguments, 'Edit', {'action': 'name'}) \
        )
    endif

    # Template variables
    markdownPrint( \
        '', \
        '## Variables', \
        '', \
        'Variables are used within the template title and prompts like so: `{{variableName}}`' \
    )
    variables = objectGet(template, 'variables')
    if variables != null:
        for variable, ixVariable in variables:
            varName = objectGet(variable, 'name')
            varLabel = objectGet(variable, 'label')
            varID = stringNew(ixVariable)
            markdownPrint('', '### Variable #' + (ixVariable + 1))
            if action == 'variable' && actionID == varID:
                elementModelRender([ \
                    {'html': 'p', 'elem': {'html': 'b', 'elem': {'text': 'Name:'}}}, \
                    {'html': 'p', 'elem': formsTextElements(ollamaChatTemplateInputID, varName, 50, nameClickFn)}, \
                    {'html': 'p', 'elem': {'html': 'b', 'elem': {'text': 'Label:'}}}, \
                    {'html': 'p', 'elem': formsTextElements(ollamaChatTemplateInputID2, varLabel, 50, nameClickFn)}, \
                    {'html': 'p', 'elem': [ \
                        formsLinkElements('Cancel', argsURL(ollamaChatArguments)), \
                        {'text': spacer + '|' + spacer}, \
                        formsLinkButtonElements('Update', systemPartial(ollamaChatTemplateOnVariableUpdate, template, ixVariable)), \
                        {'text': spacer}, \
                        formsLinkButtonElements('Remove', systemPartial(ollamaChatTemplateOnVariableRemove, template, ixVariable)), \
                        {'text': spacer}, \
                        formsLinkButtonElements('Up', systemPartial(ollamaChatTemplateOnVariableMove, template, ixVariable)), \
                        {'text': spacer}, \
                        formsLinkButtonElements('Down', systemPartial(ollamaChatTemplateOnVariableMove, template, ixVariable, true)) \
                    ]} \
                ])
                documentSetFocus(ollamaChatTemplateInputID)
            else:
                markdownPrint( \
                    '', \
                    '**Name:** ' + markdownEscape(varName), \
                    '', \
                    '**Label:** ' + markdownEscape(varLabel), \
                    '', \
                    argsLink(ollamaChatArguments, 'Edit', {'action': 'variable', 'actionID': varID}) \
                )
            endif
        endfor
    else:
        markdownPrint('', 'The template has no variables.')
    endif
    elementModelRender([ \
        {'html': 'p', 'elem': formsLinkButtonElements('Add', systemPartial(ollamaChatTemplateOnVariableAdd, template))} \
    ])

    # Template prompts
    markdownPrint('', '## Prompts')
    prompts = objectGet(template, 'prompts')
    if prompts:
        for prompt, ixPrompt in prompts:
            promptID = stringNew(ixPrompt)
            markdownPrint('', '### Prompt #' + (ixPrompt + 1))
            if action == 'prompt' && actionID == promptID:
                elementModelRender([ \
                    {'html': 'p', 'elem': { \
                        'html': 'textarea', \
                        'attr': { \
                            'autocomplete': 'off', \
                            'id': ollamaChatTemplateInputID, \
                            'rows': 8, \
                            'style': arrayJoin([ \
                                'background-color: white', \
                                'font-size: inherit', \
                                'font-family: inherit', \
                                'padding: 0.5em', \
                                'resize: none', \
                                'width: calc(100% - 1em)' \
                            ], '; ') \
                        }, \
                        'elem': {'text': prompt} \
                    }}, \
                    {'html': 'p', 'elem': [ \
                        formsLinkElements('Cancel', argsURL(ollamaChatArguments)), \
                        {'text': spacer + '|' + spacer}, \
                        formsLinkButtonElements('Update', systemPartial(ollamaChatTemplateOnPromptUpdate, template, ixPrompt)), \
                        {'text': spacer}, \
                        formsLinkButtonElements('Remove', systemPartial(ollamaChatTemplateOnPromptRemove, template, ixPrompt)), \
                        {'text': spacer}, \
                        formsLinkButtonElements('Up', systemPartial(ollamaChatTemplateOnPromptMove, template, ixPrompt)), \
                        {'text': spacer}, \
                        formsLinkButtonElements('Down', systemPartial(ollamaChatTemplateOnPromptMove, template, ixPrompt, true)) \
                    ]} \
                ])
                documentSetFocus(ollamaChatTemplateInputID)
            else:
                elementModelRender([ \
                    {'html': 'p', 'attr': {'style': 'white-space: pre-wrap;'}, 'elem': {'text': prompt}}, \
                    {'html': 'p', 'elem': [ \
                        formsLinkElements('Edit', argsURL(ollamaChatArguments, {'action': 'prompt', 'actionID': promptID})) \
                    ]} \
                ])
            endif
        endfor
    else:
        markdownPrint('', 'The template has no prompts.')
    endif
    elementModelRender([ \
        {'html': 'p', 'elem': formsLinkButtonElements('Add', systemPartial(ollamaChatTemplateOnPromptAdd, template))} \
    ])
endfunction


# The Ollama Chat template editor title input IDs
ollamaChatTemplateInputID = 'ollama-chat-template-input'
ollamaChatTemplateInputID2 = 'ollama-chat-template-input2'


async function ollamaChatTemplateOnTitle(template):
    # Update the template title
    title = stringTrim(documentInputValue(ollamaChatTemplateInputID))
    if title:
        objectSet(template, 'title', title)
        systemFetch({'url': 'updateTemplate', 'body': jsonStringify(template)})
    endif

    # Navigate back to template editor
    windowSetLocation(argsURL(ollamaChatArguments))
endfunction


async function ollamaChatTemplateOnName(template):
    # Update the template name
    name = stringTrim(documentInputValue(ollamaChatTemplateInputID))
    if name:
        objectSet(template, 'name', name)
        systemFetch({'url': 'updateTemplate', 'body': jsonStringify(template)})
    endif

    # Navigate back to template editor
    windowSetLocation(argsURL(ollamaChatArguments))
endfunction


async function ollamaChatTemplateOnNameRemove(template):
    # Remove the template name
    objectDelete(template, 'name')
    systemFetch({'url': 'updateTemplate', 'body': jsonStringify(template)})

    # Navigate back to template editor
    windowSetLocation(argsURL(ollamaChatArguments))
endfunction


async function ollamaChatTemplateOnVariableAdd(template):
    variables = objectGet(template, 'variables')
    if variables == null:
        variables = []
        objectSet(template, 'variables', variables)
    endif

    # Add the new variable
    arrayPush(variables, {'name': 'NewVariable', 'label': 'New Variable'})
    ixVariable = arrayLength(variables) - 1
    systemFetch({'url': 'updateTemplate', 'body': jsonStringify(template)})

    # Navigate back to template editor
    windowSetLocation(argsURL(ollamaChatArguments, {'action': 'variable', 'actionID': stringNew(ixVariable)}))
endfunction


async function ollamaChatTemplateOnVariableUpdate(template, ixVariable):
    variable = arrayGet(objectGet(template, 'variables'), ixVariable)

    # Update the template name
    varName = stringTrim(documentInputValue(ollamaChatTemplateInputID))
    varLabel = stringTrim(documentInputValue(ollamaChatTemplateInputID2))
    if varName:
        objectSet(variable, 'name', varName)
    endif
    if varLabel:
        objectSet(variable, 'label', varLabel)
    endif
    if varName || varLabel:
        systemFetch({'url': 'updateTemplate', 'body': jsonStringify(template)})
    endif

    # Navigate back to template editor
    windowSetLocation(argsURL(ollamaChatArguments))
endfunction


async function ollamaChatTemplateOnVariableRemove(template, ixVariable):
    variables = objectGet(template, 'variables')

    # Remove the variable
    arrayDelete(variables, ixVariable)
    if !arrayLength(variables):
        objectDelete(template, 'variables')
    endif
    systemFetch({'url': 'updateTemplate', 'body': jsonStringify(template)})

    # Navigate back to template editor
    windowSetLocation(argsURL(ollamaChatArguments))
endfunction


async function ollamaChatTemplateOnVariableMove(template, ixVariable, isDown):
    variables = objectGet(template, 'variables')

    # Move the variable
    ixVariableNew = ixVariable + if(isDown, 1, -1)
    if ixVariableNew < 0 || ixVariableNew >= arrayLength(variables):
        return
    endif
    temp = arrayGet(variables, ixVariable)
    arraySet(variables, ixVariable, arrayGet(variables, ixVariableNew))
    arraySet(variables, ixVariableNew, temp)
    systemFetch({'url': 'updateTemplate', 'body': jsonStringify(template)})

    # Navigate back to template editor
    windowSetLocation(argsURL(ollamaChatArguments, {'action': 'variable', 'actionID': stringNew(ixVariableNew)}))
endfunction


async function ollamaChatTemplateOnPromptAdd(template):
    prompts = objectGet(template, 'prompts')

    # Add the new prompt
    arrayPush(prompts, 'New prompt')
    ixPrompt = arrayLength(prompts) - 1
    systemFetch({'url': 'updateTemplate', 'body': jsonStringify(template)})

    # Navigate back to template editor
    windowSetLocation(argsURL(ollamaChatArguments, {'action': 'prompt', 'actionID': stringNew(ixPrompt)}))
endfunction


async function ollamaChatTemplateOnPromptUpdate(template, ixPrompt):
    prompts = objectGet(template, 'prompts')

    # Update the prompt
    prompt = stringTrim(documentInputValue(ollamaChatTemplateInputID))
    if prompt:
        arraySet(prompts, ixPrompt, prompt)
        systemFetch({'url': 'updateTemplate', 'body': jsonStringify(template)})
    endif

    # Navigate back to template editor
    windowSetLocation(argsURL(ollamaChatArguments))
endfunction


async function ollamaChatTemplateOnPromptRemove(template, ixPrompt):
    prompts = objectGet(template, 'prompts')

    # Remove the prompt
    arrayDelete(prompts, ixPrompt)
    systemFetch({'url': 'updateTemplate', 'body': jsonStringify(template)})

    # Navigate back to template editor
    windowSetLocation(argsURL(ollamaChatArguments))
endfunction


async function ollamaChatTemplateOnPromptMove(template, ixPrompt, isDown):
    prompts = objectGet(template, 'prompts')

    # Move the prompt
    ixPromptNew = ixPrompt + if(isDown, 1, -1)
    if ixPromptNew < 0 || ixPromptNew >= arrayLength(prompts):
        return
    endif
    temp = arrayGet(prompts, ixPrompt)
    arraySet(prompts, ixPrompt, arrayGet(prompts, ixPromptNew))
    arraySet(prompts, ixPromptNew, temp)
    systemFetch({'url': 'updateTemplate', 'body': jsonStringify(template)})

    # Navigate back to template editor
    windowSetLocation(argsURL(ollamaChatArguments, {'action': 'prompt', 'actionID': stringNew(ixPromptNew)}))
endfunction

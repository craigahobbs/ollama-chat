# Licensed under the MIT License
# https://github.com/craigahobbs/ollama-chat/blob/main/LICENSE


# The Ollama Chat conversation page
async function ollamaChatConversationPage(args):
    id = objectGet(args, 'id')

    # Fetch the conversation
    if id != null:
        conversationResponse = systemFetch('getConversation?id=' + id)
        conversationResponse = if(conversationResponse != null, jsonParse(conversationResponse))
        if conversationResponse == null:
            ollamaChatErrorPage('Unknown conversation ID')
            return
        endif
        conversation = objectGet(conversationResponse, 'conversation')
        title = objectGet(conversation, 'title')
        model = objectGet(conversation, 'model')
        generating = objectGet(conversation, 'generating')
    else:
        conversation = null
        title = ollamaChatTitle
        model = null
        generating = False
    endif

    # Render the floating controls
    elementModelRender(ollamaChatConversationFloatingElements(args, conversation, generating))
    documentSetFocus(ollamaChatConversationPromptID)

    # Render the chat title
    documentSetTitle(title)
    if conversation != null && objectGet(args, 'action') == 'title':
        markdownPrint('', '**Title:**')
        titleClickFn = systemPartial(ollamaChatConversationOnTitleUpdate, args)
        cancelClickFn = systemPartial(ollamaChatConversationOnClick, args, null, argsURL(ollamaChatArguments))
        elementModelRender(arrayNew( \
            objectNew('html', 'p', 'elem', formsTextElements(ollamaChatConversationTitleID, title, 50, titleClickFn)), \
            objectNew('html', 'p', 'elem', arrayNew( \
                formsLinkButtonElements('Update', titleClickFn), \
                objectNew('text', stringFromCharCode(160, 160)), \
                formsLinkButtonElements('Cancel', cancelClickFn) \
            )) \
        ))
        documentSetFocus(ollamaChatConversationTitleID)
    elif conversation != null:
        markdownPrint('# ' + markdownEscape(title), '', '**Model:** ' + markdownEscape(model))
    endif

    # No conversation yet or empty conversation?
    exchanges = objectGet(conversation, 'exchanges')
    if conversation == null || !exchanges:
        return
    endif

    # Render the exchanges
    ixExchangeLast = arrayLength(exchanges) - 1
    for exchange, ixExchange in exchanges:
        elementModelRender(arrayNew( \
            objectNew('html', 'h2', 'elem', objectNew('text', 'User:')), \
            objectNew( \
                'html', 'p', \
                'attr', objectNew('style', 'white-space: pre-wrap;'), \
                'elem', objectNew('text', objectGet(exchange, 'user')) \
            ), \
            objectNew('html', 'h2', 'elem', objectNew('text', 'Model:')) \
        ))
        ollamaChatConversationResponseRenderTop(args, exchange, ixExchange)
        if ixExchange != ixExchangeLast:
            ollamaChatConversationResponseRenderBottom(args, exchange, ixExchange)
        endif
    endfor

    # Render the document reset ID
    elementModelRender(objectNew('html', 'div', 'attr', objectNew('id', ollamaChatConversationResetID, 'style', 'display: none;')))

    # Render the bottom of the conversation page
    ollamaChatConversationPageBottom(args, conversation, generating)
endfunction


# Helper to render the bottom of Ollama Chat conversation page
async function ollamaChatConversationPageBottom(args, conversation, generating):
    multiline = objectGet(args, 'multiline')

    # Any exchanges?
    isThinking = false
    exchanges = objectGet(conversation, 'exchanges')
    if arrayLength(exchanges):
        # Thinking?
        ixLastExchange = arrayLength(exchanges) - 1
        lastExchange = arrayGet(exchanges, ixLastExchange)
        isThinking = objectHas(lastExchange, 'thinking')

        # Render the model reply
        ollamaChatConversationResponseRenderBottom(args, lastExchange, ixLastExchange)

        # Compute button on-click functions
        deleteExchangeFn = systemPartial(ollamaChatConversationOnClick, args, 'deleteConversationExchange')
        regenerateExchangeFn = systemPartial(ollamaChatConversationOnClick, args, 'regenerateConversationExchange')

        # Render the regenerate and delete links
        if !generating:
            elementModelRender( \
                objectNew('html', 'p', 'elem', arrayNew( \
                    formsLinkButtonElements('Delete', deleteExchangeFn), \
                    objectNew('text', stringFromCharCode(160, 160)), \
                    formsLinkButtonElements('Regenerate', regenerateExchangeFn) \
                )) \
            )
        endif
    endif

    # Render the bottom space
    fontSizePx = documentFontSize()
    bottomSpacePx = if(generating, mathFloor(0.67 * windowHeight() / fontSizePx), if(multiline, 12, 4)) * fontSizePx
    bottomElementId = stringSlice(argsURL(ollamaChatArguments, null, false, ollamaChatConversationBottomID), 1)
    elementModelRender(arrayNew( \
        objectNew('html', 'div', 'attr', objectNew('style', 'height: ' + numberToFixed(bottomSpacePx, ollamaChatConversationSVGPrecision) + 'px')), \
        objectNew('html', 'div', 'attr', objectNew('id', bottomElementId)) \
    ))

    # Set the conversation update timeout
    if generating:
        windowSetTimeout( \
            systemPartial(ollamaChatConversationOnTimeout, args, arrayLength(exchanges), isThinking), \
            ollamaChatConversationTimeoutMs \
        )
    endif
endfunction


# Helper to render the model response top part
function ollamaChatConversationResponseRenderTop(args, exchange, ixExchange):
    # Text view?
    if objectGet(args, 'text'):
        return
    endif

    # Show/hide thinking link?
    isThinking = objectHas(exchange, 'thinking')
    if isThinking:
        if ixExchange == objectGet(args, 'think'):
            markdownPrint('', argsLink(ollamaChatArguments, 'Hide Thinking', objectNew('think', null)))
        else:
            markdownPrint('', argsLink(ollamaChatArguments, 'Show Thinking', objectNew('think', ixExchange)))
        endif
    endif
endfunction


# Helper to render the model response bottom part
function ollamaChatConversationResponseRenderBottom(args, exchange, ixExchange):
    # Text view?
    if objectGet(args, 'text'):
        elementModelRender(objectNew('html', 'pre', 'elem', objectNew('text', objectGet(exchange, 'model'))))
        return
    endif

    # Thinking response?
    thinking = objectGet(exchange, 'thinking')
    if thinking && ixExchange == objectGet(args, 'think'):
        markdownPrint('', '**<think>**', '', thinking, '', '**</think>**', '', '-----')
    endif

    # Render the response
    markdownPrint('', objectGet(exchange, 'model'))
endfunction


# Conversation update timeout handler
async function ollamaChatConversationOnTimeout(args, originalExchangeCount, originalThinking):
    id = objectGet(args, 'id')

    # Fetch the conversation
    conversationResponse = systemFetch('getConversation?id=' + id)
    conversationResponse = if(conversationResponse != null, jsonParse(conversationResponse))
    if conversationResponse == null:
        ollamaChatErrorPage('Unknown conversation ID')
        return
    endif
    conversation = objectGet(conversationResponse, 'conversation')
    generating = objectGet(conversation, 'generating')

    # Done generating? Re-render the page to update the floating controls
    if !generating:
        ollamaChatConversationSavePrompt()
        ollamaChatConversationPage(args)
        return
    endif

    # Has anything changed that requires a re-render?
    exchanges = objectGet(conversation, 'exchanges')
    exchangeCount = arrayLength(exchanges)
    lastExchange = arrayGet(exchanges, exchangeCount - 1)
    isThinking = objectHas(lastExchange, 'thinking')
    if exchangeCount != originalExchangeCount || isThinking != originalThinking:
        ollamaChatConversationPage(args)
        return
    endif

    # Render the page bottom
    documentSetReset(ollamaChatConversationResetID)
    ollamaChatConversationPageBottom(args, conversation, generating)
endfunction


# The conversation refresh period, in milliseconds
ollamaChatConversationTimeoutMs = 500


# The conversation prompt input ID
ollamaChatConversationPromptID = 'ollama-chat-prompt'


# The conversation title input ID
ollamaChatConversationTitleID = 'ollama-chat-title'


# The conversation prompt session storage key
ollamaChatConversationSessionKey = 'ollama-chat-conversation-message'


# The conversation document reset ID
ollamaChatConversationResetID = 'ollama-chat-document-reset-id'


# The conversation bottom element ID (for scroll to bottom)
ollamaChatConversationBottomID = 'chat-bottom'


# The SVG numeric attribute precision
ollamaChatConversationSVGPrecision = 3


# Helper to save the prompt to session storage prior to a full re-render
function ollamaChatConversationSavePrompt():
    prompt = stringTrim(documentInputValue(ollamaChatConversationPromptID))
    if prompt != '':
        sessionStorageSet(ollamaChatConversationSessionKey, prompt)
    endif
endfunction


# Generic conversation button on-click event handler
async function ollamaChatConversationOnClick(args, api, url, noSave):
    # Call the api, if any
    if api != null:
        systemFetch(objectNew('url', api, 'body', jsonStringify(objectNew('id', objectGet(args, 'id')))))
    endif

    # Navigate?
    if url != null:
        if !noSave:
            ollamaChatConversationSavePrompt()
        endif
        windowSetLocation(url)
    else:
        ollamaChatConversationSavePrompt()
        ollamaChatConversationPage(args)
    endif
endfunction


# Title update click handler
async function ollamaChatConversationOnTitleUpdate(args):
    # Update the conversation title
    title = stringTrim(documentInputValue(ollamaChatConversationTitleID))
    if title:
        systemFetch(objectNew( \
            'url', 'setConversationTitle', \
            'body', jsonStringify(objectNew('id', objectGet(args, 'id'), 'title', title)) \
        ))
    endif

    # Navigate to the conversation
    ollamaChatConversationSavePrompt()
    windowSetLocation(argsURL(ollamaChatArguments))
endfunction


# Conversation template on-click event handler
async function ollamaChatConversationOnTemplate(conversation):
    # Get the template prompts
    prompts = arrayNew()
    for exchange in objectGet(conversation, 'exchanges'):
        arrayPush(prompts, objectGet(exchange, 'user'))
    endfor

    # Create a template from the conversation
    templateRequest = objectNew('title', objectGet(conversation, 'title'), 'prompts', prompts)
    templateResponse = systemFetch(objectNew('url', 'createTemplate', 'body', jsonStringify(templateRequest)))
    templateResponse = if(templateResponse != null, jsonParse(templateResponse))
    templateID = if(templateResponse != null, objectGet(templateResponse, 'id'))

    # Navigate to the template editor
    if templateID != null:
        windowSetLocation(argsURL(ollamaChatArguments, objectNew('id', templateID, 'view', 'template')))
    endif
endfunction


# Prompt on-enter/on-click event handler
async function ollamaChatConversationOnPrompt(args, message):
    id = objectGet(args, 'id')

    # Get the prompt text
    prompt = if(message != null, message, stringTrim(documentInputValue(ollamaChatConversationPromptID)))
    if prompt == '':
        return
    endif

    # Starting a chat?
    if id == null:
        # Start the chat
        startRequest = jsonStringify(objectNew('user', prompt))
        startResponse = systemFetch(objectNew('url', 'startConversation', 'body', startRequest))
        startResponse = if(startResponse != null, jsonParse(startResponse))
        if startResponse == null:
            return
        endif
        id = objectGet(startResponse, 'id')

        # Navigate to the conversation ID
        windowSetLocation(argsURL(ollamaChatArguments, objectNew('id', id), false, ollamaChatConversationBottomID))
        return
    endif

    # Reply to that chat
    replyRequest = jsonStringify(objectNew('id', id, 'user', prompt))
    systemFetch(objectNew('url', 'replyConversation', 'body', replyRequest))

    # Render the conversation page
    ollamaChatConversationPage(args)

    # Scroll to the bottom
    windowSetLocation(argsURL(ollamaChatArguments, null, false, ollamaChatConversationBottomID))
endfunction


# The conversation page floating controls element model
function ollamaChatConversationFloatingElements(args, conversation, generating):
    action = objectGet(args, 'action')
    menuShow = objectGet(args, 'menu')
    multiline = objectGet(args, 'multiline')
    textView = objectGet(args, 'text')
    elements = arrayNew()

    # Compute spacing
    fontSizePx = documentFontSize()
    topSpacePx = 2 * fontSizePx
    borderRadiusPx = 0.5 * fontSizePx
    menuPadPx = 0.65 * fontSizePx
    inputPadPx = 0.75 * fontSizePx
    textPadPx = 0.5 * fontSizePx
    buttonSize = 2 * fontSizePx
    topBottomPx = fontSizePx
    leftRightPx = 2 * fontSizePx

    # Compute button navigation URLs
    indexURL = argsURL(ollamaChatArguments, null, true)
    menuURL = argsURL(ollamaChatArguments, objectNew('menu', !menuShow))
    titleURL = argsURL(ollamaChatArguments, if(action != 'title', objectNew('action', 'title')))
    markdownURL = argsURL(ollamaChatArguments, objectNew('text', !textView))
    multilineURL = argsURL(ollamaChatArguments, objectNew('multiline', !multiline))

    # Compute button on-click functions
    menuClickFn = systemPartial(ollamaChatConversationOnClick, args, null, menuURL)
    titleClickFn = systemPartial(ollamaChatConversationOnClick, args, null, titleURL)
    markdownClickFn = systemPartial(ollamaChatConversationOnClick, args, null, markdownURL)
    deleteClickFn = systemPartial(ollamaChatConversationOnClick, args, 'deleteConversation', indexURL, true)
    templateClickFn = systemPartial(ollamaChatConversationOnTemplate, conversation)
    multilineFn = systemPartial(ollamaChatConversationOnClick, args, null, multilineURL)

    # Generate the download URL, if necessary
    markdownDownloadURL = null
    markdownFilename = null
    if conversation != null && !generating && menuShow:
        markdownTitle = objectGet(conversation, 'title')
        markdownParts = arrayNew('# ' + markdownEscape(markdownTitle), '', '**Model:** ' + markdownEscape(objectGet(conversation, 'model')))
        for exchange in objectGet(conversation, 'exchanges'):
            arrayPush(markdownParts, '', '## User:', '', objectGet(exchange, 'user'), '', '## Model:', '', objectGet(exchange, 'model'))
        endfor
        markdownText = arrayJoin(markdownParts, stringFromCharCode(10))
        markdownDownloadURL = urlObjectCreate(markdownText, 'text/markdown')
        markdownFilename = regexReplace(regexNew('[\'"]'), stringLower(markdownTitle), '')
        markdownFilename = regexReplace(regexNew('[^a-z0-9]+'), markdownFilename, '-')
        markdownFilename = regexReplace(regexNew('^-'), markdownFilename, '')
        markdownFilename = regexReplace(regexNew('-$'), markdownFilename, '') + '.md'
    endif

    # Get the saved session prompt, if any
    prompt = sessionStorageGet(ollamaChatConversationSessionKey)
    if prompt != null:
        sessionStorageRemove(ollamaChatConversationSessionKey)
    endif

    # The top space
    arrayPush(elements, objectNew( \
        'html', 'div', \
        'attr', objectNew('style', 'height: ' + numberToFixed(topSpacePx, ollamaChatConversationSVGPrecision) + 'px')) \
    )

    # The menu controls
    separator = stringFromCharCode(160) + '|' + stringFromCharCode(160)
    arrayPush(elements, objectNew( \
        'html', 'div', \
        'attr', objectNew( \
            'style', arrayJoin(arrayNew( \
                'align-items: left', \
                'background-color: #e0e0e0', \
                'border-radius: ' + numberToFixed(borderRadiusPx, ollamaChatConversationSVGPrecision) + 'px', \
                'color: black', \
                'display: flex', \
                'left: ' + numberToFixed(topBottomPx, ollamaChatConversationSVGPrecision) + 'px', \
                'padding: ' + numberToFixed(menuPadPx, ollamaChatConversationSVGPrecision) + 'px', \
                'position: fixed', \
                'top: ' + numberToFixed(topBottomPx, ollamaChatConversationSVGPrecision) + 'px' \
            ), '; ') \
        ), \
        'elem', arrayNew( \
            formsLinkElements('Back', indexURL), \
            objectNew('text', separator), \
            formsLinkElements('Top', argsURL(ollamaChatArguments, null, false, '_top')), \
            objectNew('text', separator), \
            formsLinkElements('Bottom', argsURL(ollamaChatArguments, null, false, ollamaChatConversationBottomID)), \
            if(conversation != null && !generating, arrayNew( \
                objectNew('text', separator), \
                formsLinkButtonElements(if(menuShow, '<<', '>>'), menuClickFn), \
                if(menuShow, arrayNew( \
                    objectNew('text', separator), \
                    formsLinkButtonElements('Title', titleClickFn), \
                    objectNew('text', separator), \
                    formsLinkButtonElements(if(!textView, 'Text', 'Markdown'), markdownClickFn), \
                    objectNew('text', separator), \
                    objectNew( \
                        'html', 'a', \
                        'attr', objectNew('href', markdownDownloadURL, 'download', markdownFilename), \
                        'elem', objectNew('text', 'Download') \
                    ), \
                    objectNew('text', separator), \
                    formsLinkButtonElements('Template', templateClickFn), \
                    objectNew('text', separator), \
                    formsLinkButtonElements('Delete', deleteClickFn) \
                )) \
            )) \
        ) \
    ))

    # The prompt controls
    arrayPush(elements, objectNew( \
        'html', 'div', \
        'attr', objectNew( \
            'style', arrayJoin(arrayNew( \
                'align-items: ' + if(multiline, 'flex-end', 'center'), \
                'background-color: #c0c0c0', \
                'border-radius: ' + numberToFixed(borderRadiusPx, ollamaChatConversationSVGPrecision) + 'px', \
                'bottom: ' + numberToFixed(topBottomPx, ollamaChatConversationSVGPrecision) + 'px', \
                'display: flex', \
                'left: ' + numberToFixed(leftRightPx, ollamaChatConversationSVGPrecision) + 'px', \
                'padding: ' + numberToFixed(inputPadPx, ollamaChatConversationSVGPrecision) + 'px', \
                'position: fixed', \
                'right: ' + numberToFixed(leftRightPx, ollamaChatConversationSVGPrecision) + 'px' \
            ), '; ') \
        ), \
        'elem', arrayNew( \
            ollamaChatConversationSVGButton(0.75 * buttonSize, buttonSize, 24, 'M4,6 H20 M4,12 H20 M4,18 H20', 'none', 'none', multilineFn), \
            objectNew( \
                'html', if(multiline, 'textarea', 'input'), \
                'attr', objectNew( \
                    'autocomplete', 'off', \
                    'id', ollamaChatConversationPromptID, \
                    'placeholder', 'Type your message...', \
                    'rows', if(multiline, 8), \
                    'style', arrayJoin(arrayNew( \
                        'background-color: white', \
                        'border: none', \
                        'flex: 1', \
                        'font-size: inherit', \
                        'font-family: inherit', \
                        'margin-left: ' + numberToFixed(textPadPx, ollamaChatConversationSVGPrecision) + 'px', \
                        'margin-right: ' + numberToFixed(textPadPx, ollamaChatConversationSVGPrecision) + 'px', \
                        'min-width: 0', \
                        'outline: none', \
                        'padding: ' + numberToFixed(textPadPx, ollamaChatConversationSVGPrecision) + 'px', \
                        'resize: none' \
                    ), '; '), \
                    'type', if(!multiline, 'text'), \
                    'value', if(!multiline, prompt) \
                ), \
                'elem', if(multiline && prompt != null, objectNew('text', prompt)), \
                'callback', if(!multiline && !generating, \
                    objectNew('keyup', systemPartial(formsTextOnKeyup, systemPartial(ollamaChatConversationOnPrompt, args))) \
                ) \
            ), \
            if(!generating, \
                ollamaChatConversationSVGButton(buttonSize, buttonSize, 24, 'M12,18 V7 M7,12 L12,7 L17,12', 'none', 'white', \
                    systemPartial(ollamaChatConversationOnPrompt, args)) \
            ), \
            if(generating, \
                ollamaChatConversationSVGButton(buttonSize, buttonSize, 24, 'M8,8 H16 V16 H8 Z', 'black', 'white', \
                    systemPartial(ollamaChatConversationOnClick, args, 'stopConversation')) \
            ) \
        ) \
    ))

    return elements
endfunction


# Create an SVG button element model
function ollamaChatConversationSVGButton(width, height, viewSize, symbolPath, symbolFill, backgroundColor, callback):
    return objectNew( \
        'html', 'button', \
        'attr', objectNew( \
            'type', 'button', \
            'style', arrayJoin(arrayNew( \
                'background: transparent', \
                'border: none', \
                'padding: 0', \
                'cursor: pointer' \
            ), '; '), \
            'onmouseover', "this.children[0].style.opacity='" + if(backgroundColor != 'none', '0.8', '0.6') + "';", \
            'onmouseout', "this.children[0].style.opacity='1';" \
        ), \
        'elem', objectNew( \
            'svg', 'svg', \
            'attr', objectNew( \
                'width', numberToFixed(width, ollamaChatConversationSVGPrecision), \
                'height', numberToFixed(height, ollamaChatConversationSVGPrecision), \
                'viewBox', '0 0 ' + viewSize + ' ' + viewSize, \
                'fill', 'none', \
                'style', 'vertical-align: middle', \
                'preserveAspectRatio', 'none' \
            ), \
            'elem', arrayNew( \
                if(backgroundColor != 'none', objectNew( \
                    'svg', 'circle', \
                    'attr', objectNew( \
                        'cx', numberToFixed(0.5 * viewSize, ollamaChatConversationSVGPrecision), \
                        'cy', numberToFixed(0.5 * viewSize, ollamaChatConversationSVGPrecision), \
                        'r', numberToFixed(0.5 * viewSize, ollamaChatConversationSVGPrecision), \
                        'stroke', 'none', \
                        'fill', backgroundColor \
                    ) \
                )), \
                objectNew( \
                    'svg', 'path', \
                    'attr', objectNew( \
                        'd', symbolPath, \
                        'stroke', if(symbolFill == 'none', 'black', 'none'), \
                        'fill', symbolFill, \
                        'stroke-width', numberToFixed(0.1 * viewSize) \
                    ) \
                ) \
            ) \
        ), \
        'callback', objectNew('click', callback) \
    )
endfunction
